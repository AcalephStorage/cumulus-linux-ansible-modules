#!/usr/bin/env python
#
# Copyright (C) 2015, Cumulus Networks www.cumulusnetworks.com
#
#
DOCUMENTATION = '''
---
module: cl_interface
author: Stanley Karunditu
short_description: Configures a front panel port, loopback or \
management port on Cumulus Linux.
description:
    - Configures a front panel, sub-interface, SVI, management \
or loopback port on a Cumulus Linux switch. For bridge ports \
use the cl_bridge module. For bond ports use the \
cl_bond module. For more details \
review the Layer2 Interface Guide @ \
http://docs.cumulusnetworks.com
options:
    name:
        description:
            - name of the interface
        required: true
    alias:
        description:
            - add a port description
    ipv4:
        description:
            - list of IPv4 addresses to configure on the interface. \
use X.X.X.X/YY syntax.
    ipv6:
        description:
            - list of IPv6 addresses  to configure on the interface. \
use X:X:X::X/YYY syntax
    addr_method:
        description:
            - can be loopback for loopback interfaces or dhcp for dhcp \
interfaces.
    speed:
        description:
            - set speed of the swp(front panel) or \
management(eth0) interface. speed is in MB
    mtu:
        description:
            - set MTU. Configure Jumbo Frame by setting MTU to 9000.
    state:
        description:
            - set to 'noconfig' to remove all config from an interface. \
Provides the ability to reset the configuration. See the examples section for more details.
        choices: ['noconfig', 'hasconfig']
        default: 'hasconfig'
requirements: [ Alternate Debian network interface manager - \
ifupdown2 @ github.com/CumulusNetworks/ifupdown2 ]
notes:
    - For the config to be activated, i.e installed in the kernel, \
"service networking reloaded" needs be be executed. See EXAMPLES section.
'''

# handy helper for calling system calls.
# calls AnsibleModule.run_command and prints a more appropriate message
# exec_path - path to file to execute, with all its arguments.
# E.g "/sbin/ip -o link show"
# failure_msg - what message to print on failure
def run_cmd(module, exec_path, failure_msg):
    (rc, out, err) = module.run_command(exec_path)
    if rc == 0:
        module.fail_json(msg=failure_msg)
    return out

def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True, type='str'),
            ipv4=dict(type='list'),
            ipv6=dict(type='list'),
            alias=dict(type='str'),
            addr_method=dict(type='str',
                             choices=['loopback', 'dhcp']),
            speed=dict(type='str'),
            mtu=dict(type='str'),
            state=dict(type='str', choices=['noconfig', 'hasconfig'],
                       default='hasconfig'),

        ),
    )


# import module snippets
from ansible.module_utils.basic import *
# incompatible with ansible 1.4.4 ubuntu 12.04 version
# from ansible.module_utils.urls import *

if __name__ == '__main__':
    main()
