#!/usr/bin/env python
#
# Copyright (C) 2015, Cumulus Networks www.cumulusnetworks.com
#
#
DOCUMENTATION = '''
---
module: cl_ports
author: Stanley Karunditu
short_description: Configure Cumulus Switch port attributes (ports.conf)
description:
    - Set the initial port attribute defined in the Cumulus Linux ports.conf, \
file. This module does not do any error checking at the moment. Be careful to
not include ports that do not exist on the switch. And carefully read the original \
ports.conf file for any exceptions or limitations.
For more details go the Configure Switch Port Attribute Documentation @ \
http://docs.cumulusnetworks.com
options:
    speed_10g:
        description:
            - list of ports to run initial run at 10G
    speed_40g:
        description:
            - list of ports to run initial run at 40G
    speed_4_by_10g:
        description:
            - list of 40G ports that will be unganged to run as 4 10G ports.
    speed_40g_div_4:
        description:
            - list of 10G ports that will be ganged to form a 40G port
'''
EXAMPLES = '''
Example playbook entries using the cl_ports module to manage the switch attributes
defined in the ports.conf file on Cumulus Linux

## Unganged port configuration on certain ports.

    - name: configure ports.conf setup
      cl_ports:
          speed_4_by_10g: ['swp1-3', 'swp6']
          speed_40g: ['swp4-5', 'swp7-32']

'''
PORTS_CONF = '/etc/cumulus/ports.conf'

def run_cl_cmd(module, cmd, check_rc=True):
    try:
        (rc, out, err) = module.run_command(cmd, check_rc=check_rc)
    except Exception, e:
        module.fail_json(msg=e.strerror)
    # trim last line as it is always empty
    ret = out.splitlines()
    return ret[:-1]


def hash_existing_ports_conf(module):
    module.existing_ports = {}
    if os.path.exists(PORTS_CONF):
        existing_ports_conf = open(PORTS_CONF).readlines()
        for _line in existing_ports_conf:
            m0 = re.match('^(\d+)=(\w+)', _line)
            if m0:
                _portnum = int(m0.group(1))
                _speed = m0.group(2)
                module.existing_ports[_portnum] = _speed
    else:
        _msg = '/etc/cumulus/ports.conf is missing'
        module.fail_json(msg=_msg, changed=False)
        return False # for unit tests purposes

def generate_new_ports_conf_hash(module):
    pass

def compare_new_and_old_port_conf_hash(module):
    pass

def main():
    module = AnsibleModule(
        argument_spec=dict(
            speed_40g_div_4=dict(type='list'),
            speed_4_by_10g=dict(type='list'),
            speed_10g=dict(type='list'),
            speed_40g=dict(type='list')
        ),
        required_one_of = [['speed_40g_div_4',
                            'speed_4_by_10g',
                            'speed_10g',
                            'speed_40g']]
    )

    _changed = False
    hash_existing_ports_conf(module)
    generate_new_ports_conf_hash(module)
    if compare_new_and_old_port_conf_hash(module):
        _changed = True
        _msg = "/etc/cumulus/ports.conf changed"

    _msg = 'No change in /etc/ports.conf'
#    module.fail_json(msg=_msg)
    module.exit_json(changed=_changed, msg=_msg)


# import module snippets
from ansible.module_utils.basic import *
# from ansible.module_utils.urls import *
import time
import os
from datetime import datetime
from urlparse import urlparse

if __name__ == '__main__':
    main()
